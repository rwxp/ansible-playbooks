# -*- mode: ruby -*-
# vi: set ft=ruby :

ips = File.readlines('./vars/ips.txt').map(&:strip)
master_ip = ips.first
ips=ips.drop(1)

if ARGV.include?('up') 
  puts "Remember to configure the ips.txt file"
  puts "Select the playbook you want to run:"
  puts "1) Cluster."
  puts "2) Slurm."
  
  playbook_path = ''
  loop do
    print "Enter the number of the desired option: "
    answer = STDIN.gets.chomp
    case answer
    when "1"
      puts "Running Cluster playbook."
      playbook_path = "/vagrant/cluster/cluster.yml"
      break
    when "2"
      puts "Running Slurm playbook."
      playbook_path = "/vagrant/slurm/slurm.yml"
      break
    else
      puts "Invalid option. Try again."
    end
  end
end

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config| # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.

  config.vm.box = "bento/ubuntu-22.04"

  config.vm.provider "virtualbox" do |vb|
    vb.cpus = "2"
    vb.memory = "2048"
  end

  # Multi-Machine Definition
  # Vagrant is able to define and control multiple guest machines per Vagrantfile. 
  # This is known as a "multi-machine" environment. These machines are generally 
  # able to work together or are somehow associated with each other. 

  ips.each_with_index do |ip, index|
    config.vm.define "slave_#{index + 1}" do |slave|
      slave.vm.network "private_network", ip: ip
    end
  end

  config.vm.define "master" do |master|
  # Create a private network, which allows host-only access to the machine
  master.vm.network "private_network", ip: master_ip
  master.vm.provision "shell", path: "scripts/master.sh"
  master.vm.provision "shell", privileged: false, path: "scripts/passwordless.sh"
  master.vm.provision "shell",privileged:false, inline: <<-SHELL
  ansible-playbook "#{playbook_path}"
  SHELL
  end
end
